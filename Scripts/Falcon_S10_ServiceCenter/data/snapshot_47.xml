<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="47">
  <HTTPTask id="554" hostname="itg-live.www8.hp.com" path="/caas/header-footer/us/en/default/latest.r?contentType=js&amp;hide_search=true&amp;show_shopping_cart=true&amp;hide_country_selector=true" url="https://itg-live.www8.hp.com/caas/header-footer/us/en/default/latest.r?contentType=js&amp;hide_search=true&amp;show_shopping_cart=true&amp;hide_country_selector=true" ip="96.6.129.65" port="443" connectionId="20" origin="Primary" frame="1" startDateTime="2021-07-16T05:08:28.087+00:00" startTime="1512931859" endTime="1512933546">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>Y29udGVudFR5cGU9anMmaGlkZV9zZWFyY2g9dHJ1ZSZzaG93X3Nob3BwaW5nX2NhcnQ9dHJ1ZSZoaWRlX2NvdW50cnlfc2VsZWN0b3I9dHJ1ZQ==</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="contentType" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>anM=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="hide_search" index="1">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dHJ1ZQ==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="show_shopping_cart" index="2">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dHJ1ZQ==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="hide_country_selector" index="3">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dHJ1ZQ==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aXRnLWxpdmUud3d3OC5ocC5jb20=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="sec-ch-ua" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>IiBOb3Q7QSBCcmFuZCI7dj0iOTkiLCAiR29vZ2xlIENocm9tZSI7dj0iOTEiLCAiQ2hyb21pdW0iO3Y9IjkxIg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="sec-ch-ua-mobile" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>PzA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkxLjAuNDQ3Mi4xMjQgU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Sec-Fetch-Site" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2FtZS1zaXRl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Sec-Fetch-Mode" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY29ycw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Sec-Fetch-Dest" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2NyaXB0</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM6Ly9wcHNzdXBwb3J0LWl0Z2xsYmg3LmluYy5ocC5jb20v</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="11">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="12">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>T3B0YW5vbkNvbnNlbnQ9Y29uc2VudElkPWExNWJlM2ZlLWJlZjYtNDNhOS04YzczLWQ2NzQ3ZDEyZTk5OCZkYXRlc3RhbXA9RnJpK0p1bCsxNisyMDIxKzA0JTNBNDIlM0E0OStHTVQlMkIwMDAwKyhHcmVlbndpY2grTWVhbitUaW1lKSZ2ZXJzaW9uPTYuMTkuMCZpbnRlcmFjdGlvbkNvdW50PTA7IGR0Q29va2llPXZfNF9zcnZfMV9zbl81RDkyOUVDQjIyRTgwMUY1NDY4NzVBNUM2QzgwMjE5MF9wZXJjXzEwMDAwMF9vbF8wX211bF8xX2FwcC0zQWVhN2M0YjU5ZjI3ZDQzZWJfMTsgcnhWaXNpdG9yPTE2MjY0MTE3NjkzMzZWTFE4UjNDUFJDU0hRSzg4QjZEVVFJVlZPOTA1NDlPVTsgZHRTYT0tOyBkdExhdEM9MTE2NTsgcnh2dD0xNjI2NDEzNTY5MzU2fDE2MjY0MTE3NjkzNDc7IGR0UEM9MSQ0MTE3NjkzMjhfOTMzaDF2U1FWS1RIUEhDRUhGVkZSSVJHTFZQVEhJV0hVTUNBRVAtMGUxOyBBTUNWXzVFMzQxMjNGNTI0NUIyQ0QwQTQ5MEQ0NSU0MEFkb2JlT3JnPTE1ODU1NDAxMzUlN0NNQ0lEVFMlN0MxODgyNSU3Q3ZWZXJzaW9uJTdDNC40LjA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9jYWFzL2hlYWRlci1mb290ZXIvdXMvZW4vZGVmYXVsdC9sYXRlc3Qucj9jb250ZW50VHlwZT1qcyZoaWRlX3NlYXJjaD10cnVlJnNob3dfc2hvcHBpbmdfY2FydD10cnVlJmhpZGVfY291bnRyeV9zZWxlY3Rvcj10cnVlIEhUVFAvMS4xDQpIb3N0OiBpdGctbGl2ZS53d3c4LmhwLmNvbQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0Kc2VjLWNoLXVhOiAiIE5vdDtBIEJyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSI5MSIsICJDaHJvbWl1bSI7dj0iOTEiDQpzZWMtY2gtdWEtbW9iaWxlOiA/MA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkxLjAuNDQ3Mi4xMjQgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiAqLyoNClNlYy1GZXRjaC1TaXRlOiBzYW1lLXNpdGUNClNlYy1GZXRjaC1Nb2RlOiBuby1jb3JzDQpTZWMtRmV0Y2gtRGVzdDogc2NyaXB0DQpSZWZlcmVyOiBodHRwczovL3Bwc3N1cHBvcnQtaXRnbGxiaDcuaW5jLmhwLmNvbS8NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogT3B0YW5vbkNvbnNlbnQ9Y29uc2VudElkPWExNWJlM2ZlLWJlZjYtNDNhOS04YzczLWQ2NzQ3ZDEyZTk5OCZkYXRlc3RhbXA9RnJpK0p1bCsxNisyMDIxKzA0JTNBNDIlM0E0OStHTVQlMkIwMDAwKyhHcmVlbndpY2grTWVhbitUaW1lKSZ2ZXJzaW9uPTYuMTkuMCZpbnRlcmFjdGlvbkNvdW50PTA7IGR0Q29va2llPXZfNF9zcnZfMV9zbl81RDkyOUVDQjIyRTgwMUY1NDY4NzVBNUM2QzgwMjE5MF9wZXJjXzEwMDAwMF9vbF8wX211bF8xX2FwcC0zQWVhN2M0YjU5ZjI3ZDQzZWJfMTsgcnhWaXNpdG9yPTE2MjY0MTE3NjkzMzZWTFE4UjNDUFJDU0hRSzg4QjZEVVFJVlZPOTA1NDlPVTsgZHRTYT0tOyBkdExhdEM9MTE2NTsgcnh2dD0xNjI2NDEzNTY5MzU2fDE2MjY0MTE3NjkzNDc7IGR0UEM9MSQ0MTE3NjkzMjhfOTMzaDF2U1FWS1RIUEhDRUhGVkZSSVJHTFZQVEhJV0hVTUNBRVAtMGUxOyBBTUNWXzVFMzQxMjNGNTI0NUIyQ0QwQTQ5MEQ0NSU0MEFkb2JlT3JnPTE1ODU1NDAxMzUlN0NNQ0lEVFMlN0MxODgyNSU3Q3ZWZXJzaW9uJTdDNC40LjANCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="OptanonConsent" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y29uc2VudElkPWExNWJlM2ZlLWJlZjYtNDNhOS04YzczLWQ2NzQ3ZDEyZTk5OCZkYXRlc3RhbXA9RnJpK0p1bCsxNisyMDIxKzA0JTNBNDIlM0E0OStHTVQlMkIwMDAwKyhHcmVlbndpY2grTWVhbitUaW1lKSZ2ZXJzaW9uPTYuMTkuMCZpbnRlcmFjdGlvbkNvdW50PTA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="dtCookie" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dl80X3Nydl8xX3NuXzVEOTI5RUNCMjJFODAxRjU0Njg3NUE1QzZDODAyMTkwX3BlcmNfMTAwMDAwX29sXzBfbXVsXzFfYXBwLTNBZWE3YzRiNTlmMjdkNDNlYl8x</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="rxVisitor" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTYyNjQxMTc2OTMzNlZMUThSM0NQUkNTSFFLODhCNkRVUUlWVk85MDU0OU9V</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="dtSa" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>LQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="dtLatC" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTE2NQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="rxvt" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTYyNjQxMzU2OTM1NnwxNjI2NDExNzY5MzQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="dtPC" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MSQ0MTE3NjkzMjhfOTMzaDF2U1FWS1RIUEhDRUhGVkZSSVJHTFZQVEhJV0hVTUNBRVAtMGUx</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="AMCV_5E34123F5245B2CD0A490D45%40AdobeOrg" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTU4NTU0MDEzNSU3Q01DSURUUyU3QzE4ODI1JTdDdlZlcnNpb24lN0M0LjQuMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>16789</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDsgY2hhcnNldD1VVEYtOA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTY3ODk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QXBhY2hlLzIuNC42IChSZWQgSGF0IEVudGVycHJpc2UgTGludXgpIENvbW11bmlxdWUvNC4zLjI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Dispatcher" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZGlzcGF0Y2hlcjF3ZXN0dXMy</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Vhost" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z2xvYmFsbmF2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Content-Type-Options" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm9zbmlmZg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Last-Modified" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAxNiBKdWwgMjAyMSAwNTowMjo1MSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Vy8iMzVmYTMtNWM3MzY3ZmVjNTA2My1nemlwIg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Ranges" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Frame-Options" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0FNRU9SSUdJTg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Access-Control-Allow-Origin" index="11">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="12">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT02MDQ3ODg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Expires" index="13">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAyMyBKdWwgMjAyMSAwNTowMjozOSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="14">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAxNiBKdWwgMjAyMSAwNTowMjo1MSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="15">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="16">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Set-Cookie" index="17">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QXBwbGljYXRpb25HYXRld2F5QWZmaW5pdHlDT1JTPTA1MjQ0ZDEwM2MyNmRkODVmNGQzNTc1YmE4ZDY2Zjg1OyBQYXRoPS87IFNhbWVTaXRlPU5vbmU7IFNlY3VyZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Set-Cookie" index="18">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QXBwbGljYXRpb25HYXRld2F5QWZmaW5pdHk9MDUyNDRkMTAzYzI2ZGQ4NWY0ZDM1NzViYThkNjZmODU7IFBhdGg9Lw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7IGNoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAxNjc4OQ0KU2VydmVyOiBBcGFjaGUvMi40LjYgKFJlZCBIYXQgRW50ZXJwcmlzZSBMaW51eCkgQ29tbXVuaXF1ZS80LjMuMg0KWC1EaXNwYXRjaGVyOiBkaXNwYXRjaGVyMXdlc3R1czINClgtVmhvc3Q6IGdsb2JhbG5hdg0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KTGFzdC1Nb2RpZmllZDogRnJpLCAxNiBKdWwgMjAyMSAwNTowMjo1MSBHTVQNCkVUYWc6IFcvIjM1ZmEzLTVjNzM2N2ZlYzUwNjMtZ3ppcCINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpYLUZyYW1lLU9wdGlvbnM6IFNBTUVPUklHSU4NCkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbjogKg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT02MDQ3ODgNCkV4cGlyZXM6IEZyaSwgMjMgSnVsIDIwMjEgMDU6MDI6MzkgR01UDQpEYXRlOiBGcmksIDE2IEp1bCAyMDIxIDA1OjAyOjUxIEdNVA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpTZXQtQ29va2llOiBBcHBsaWNhdGlvbkdhdGV3YXlBZmZpbml0eUNPUlM9MDUyNDRkMTAzYzI2ZGQ4NWY0ZDM1NzViYThkNjZmODU7IFBhdGg9LzsgU2FtZVNpdGU9Tm9uZTsgU2VjdXJlDQpTZXQtQ29va2llOiBBcHBsaWNhdGlvbkdhdGV3YXlBZmZpbml0eT0wNTI0NGQxMDNjMjZkZDg1ZjRkMzU3NWJhOGQ2NmY4NTsgUGF0aD0vDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="1512933546" offset="0" length="1839" />
        <PacketInfo time="1512933546" offset="1839" length="15731" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>